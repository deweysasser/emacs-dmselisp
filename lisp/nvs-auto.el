;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; nvs-auto.el -- handle autoloads
;; 
;; Copyright 2012 Dewey M. Sasser  All Rights Reserved
;;         Unpublished, Confidential and Proprietary
;; 
;; Author          : Dewey M. Sasser
;; Created On      : Wed Mar 06 13:08:54 1996
;; Status          : $State: Exp $
;; Keywords        : 
;; PURPOSE
;; 	|>Description of modules purpose<|
;;
;; INSTRUCTIONS
;;      To update this file, load the "cookie" library and run M-x
;;      update-autoloads-here.
;; 
;; TABLE OF CONTENTS
;;   (defun update-autoloads-here ()
;;   (defmodemethod insert-header-wrapper-internal default (buf-name) (insert "\n#ifndef " buf-name "\n#define " buf-name "\n\n" "#ifdef __cplusplus\nextern \"C\" {\n#endif\n") (goto-char (point-max)) (insert "\n\n\n#ifdef __cplusplus\n}\n#endif\n" "#endif " comment-start " " buf-name " " comment-end))
;;   (defmodemethod insert-header-wrapper-internal c++-mode (buf-name) (if (looking-at "/\\*") (search-forward "*/" nil (quote t))) (while (looking-at "//") (forward-line 1)) (insert "\n#ifndef " buf-name "\n#define " buf-name "\n\n") (end-of-buffer) (insert "\n\n\n#endif " comment-start " " buf-name " " comment-end))
;;   (defvar msvt-basic-indent 3 "\
;;   (defvar eltest::indent-inc 2 "\
;;   (defvar eltest::dont-find-differences nil "\
;; 
;;  OPTIONS
;;    Update Tests:  yes
;; 
;; $RCSfile: nvs-auto.el,v $
;; $Revision: 1.19 $
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(load-library "autoload")
;;; this function was extracted from autoload.el in the 19.30
;;; distribution.  It appears to have dissappeared from 19.31.  Too bad.
(defun update-autoloads-here ()
  "\
Update sections of the current buffer generated by \\[update-file-autoloads]."
  (interactive)
  (let ((generated-autoload-file (buffer-file-name)))
    (save-excursion
      (goto-char (point-min))
      (while (search-forward generate-autoload-section-header nil t)
	(let* ((form (condition-case ()
			 (read (current-buffer))
		       (end-of-file nil)))
	       (file (nth 3 form)))
	  (if (and (stringp file)
		   (or (get-file-buffer file)
		       (file-exists-p file)))
	      ()
	    (setq file (if (y-or-n-p (format "Can't find library `%s'; remove its autoloads? "
					     (nth 2 form) file))
			   t
			 (condition-case ()
			     (read-file-name (format "Find `%s' load file: "
						     (nth 2 form))
					     nil nil t)
			   (quit nil)))))
	  (if file
	      (let ((begin (match-beginning 0)))
		(search-forward generate-autoload-section-trailer)
		(delete-region begin (point))))
	  (if (stringp file)
	      (generate-file-autoloads file)))))))




;;;### (autoloads (make-autoproto find-next-c-function autoproto-update) "autoproto" "autoproto.el" (13258 37262))
;;; Generated autoloads from autoproto.el

(autoload (quote autoproto-update) "autoproto" "\
Update the prototypes for a file." t nil)

(autoload (quote find-next-c-function) "autoproto" "\
Find the prototype line of the next c function." nil nil)

(autoload (quote make-autoproto) "autoproto" "\
Creates the autoproto header line. This function prompts for the
filenames to put to prototypes into, and inserts the keys into the
buffer for autoproto-update to locate the proper files." t nil)

;;;***

(autoload (quote header-prefix-sstring) "c-support" "\
Returns the header prefix string stripped of trailing blanks" nil nil)

(autoload (quote delete-function-documentation) "c-support" "\
delete documentation header" nil nil)

(autoload (quote have-function-documentation-p) "c-support" "\
Return 't if function documentation already exists" nil nil)

(autoload (quote next-c-function-name) "c-support" "\
Returns the name of the next c or lisp function.
  Should only be called from before a function as it cannot reliable  tell
  function calls from function definitions and certain c constructs such as
  for and while loops." nil nil)

(autoload (quote delete-synopsis) "c-support" "\
Deletes current synopsis, places cursor at start of next line" t nil)

;;;### (autoloads (help-for-field header-prefix-string document-c-function document-function match-buffer-substring-no-properties) "functions" "functions.el" (13258 59268))
;;; Generated autoloads from functions.el

(autoload (quote match-buffer-substring-no-properties) "functions" "\
Extract the substring of a buffer from MATCHNUM" nil (quote macro))

(autoload (quote document-function) "functions" "\
Insert a comment block containing the module title, author, etc.  To
   use, place the cursor on or before the line starting the function definition.

   Functions with these headers can be automatically placed into the table
   of contents by the update-table-of-contents command.

   The synopsis can be automatically constructed by the
   update-function-synopsis (\\[update-function-synopsis]) command." t nil)

(autoload (quote document-c-function) "functions" "\
Insert a comment block containing the module title, author, etc.  To
   use, place the cursor on or before the line starting the function definition.

   Functions with these headers can be automatically placed into the table
   of contents by the update-table-of-contents command.

   The synopsis can be automatically constructed by the
   update-function-synopsis (\\[update-function-synopsis]) command." t nil)

(autoload (quote header-prefix-string) "functions" "\
Returns a mode specific prefix string for use in headers.
Is sensitive to the various language dependent comment conventions." nil nil)

(autoload (quote help-for-field) "functions" "\
Give some quick help on what the current documentation field is for
and how to use it" t nil)
 (autoload 'kill-all-comments "functions")

;;;***


;;;### (autoloads (make-autoproto find-next-c-function autoproto-update) "autoproto" "autoproto.el" (13258 37262))
;;; Generated autoloads from autoproto.el

(autoload (quote autoproto-update) "autoproto" "\
Update the prototypes for a file." t nil)

(autoload (quote find-next-c-function) "autoproto" "\
Find the prototype line of the next c function." nil nil)

(autoload (quote make-autoproto) "autoproto" "\
Creates the autoproto header line. This function prompts for the
filenames to put to prototypes into, and inserts the keys into the
buffer for autoproto-update to locate the proper files." t nil)

;;;***



;;;### (autoloads (insert-header-tests find-insert-exceptions make-insert-return-values-function find-insert-return-values c++-to-c-comments-buffer do-update-all-synopsis do-update-table-of-contents help-for-c-templates header-goto-end header-goto-purpose header-goto-table-of-contents update-table-of-contents insert-end insert-box update-all-synopsis update-function-synopsis delete-synopsis next-c-function-name have-function-documentation-p delete-function-documentation header-prefix-sstring) "c-support" "c-support.el" (13258 37264))
;;; Generated autoloads from c-support.el

(autoload (quote header-prefix-sstring) "c-support" "\
Returns the header prefix string stripped of trailing blanks" nil nil)

(autoload (quote delete-function-documentation) "c-support" "\
delete documentation header" nil nil)

(autoload (quote have-function-documentation-p) "c-support" "\
Return 't if function documentation already exists" nil nil)

(autoload (quote next-c-function-name) "c-support" "\
Returns the name of the next c or lisp function.
  Should only be called from before a function as it cannot reliable  tell
  function calls from function definitions and certain c constructs such as
  for and while loops." nil nil)

(autoload (quote delete-synopsis) "c-support" "\
Deletes current synopsis, places cursor at start of next line" t nil)

(autoload (quote update-function-synopsis) "c-support" "\
Updates the synopsis in a function header.  Grabs the function
  declaration (up to the first bracket in c++ or the first blank in c),
  converts comments, and inserts it under the synopsis line.

  Removes the old synopsis." t nil)

(autoload (quote update-all-synopsis) "c-support" "\
Updates the synopses of all function headers." t nil)

(autoload (quote insert-box) "c-support" "\
Insert a text prefix at a column in all the lines in the region.
   Called from a program, takes three arguments, START, END, and TEXT.
   The column is taken from that of START.
   The rough inverse of this function is kill-rectangle." t nil)

(autoload (quote insert-end) "c-support" "\
Insert a text prefix at the end in all the lines in the region.
   Called from a program, takes three arguments, START, END, and TEXT.
   The column is taken from that of START." t nil)

(autoload (quote update-table-of-contents) "c-support" "\
Updates the table of contents in the file header.
   Removes the old table of contents." t nil)

(autoload (quote header-goto-table-of-contents) "c-support" "\
Moves to the table of contents in the header" t nil)

(autoload (quote header-goto-purpose) "c-support" "\
Moves to the purpose in the header" t nil)

(autoload (quote header-goto-end) "c-support" "\
Moves to the end of the header box" t nil)

(autoload (quote help-for-c-templates) "c-support" "\
You have discovered 'C-ct', the C and C++ templates facility.  
   All templates start with this sequence. From there, type a templates option:

f, C-f  Document a C function
s, C-s  Update the synopsis of a C function
   C-h  Make a file header
r, C-r  Document a revision to the file
c       Goto table of contents
   C-c  Update the table of contents 
t, C-t  Move among and edit the |> <| constructs.
b, C-b  Make a box comment
d, C-d  Make a visual dividing line
e, C-e  Goto end of header
p, C-p  Goto purpose in header
m       Insert AFS c or c++ module header code line
C-m     Insert AFS c or c++ main   header code line
        (There are no special header code liens for include files.)

New Feature: \\[remake-header] -- Insert a new header, copy details from
             old header.  May still need hand cleanup afterwards.

Please use \\[describe-key] to find out more about any of these keys." t nil)

(autoload (quote do-update-table-of-contents) "c-support" nil nil nil)

(autoload (quote do-update-all-synopsis) "c-support" nil nil nil)

(autoload (quote c++-to-c-comments-buffer) "c-support" "\
Convert C++ style comments to C-style in whole buffer. 
This only works in c-mode. " t nil)

(autoload (quote find-insert-return-values) "c-support" "\
Find all return statements in following function, put the values into the
current buffer." t nil)

(autoload (quote make-insert-return-values-function) "c-support" "\
Make a lambda expression that inserts it's arg, prefixed by PREFIX" nil nil)

(autoload (quote find-insert-exceptions) "c-support" "\
Finds all exceptions thrown within the code and inserts there
documentation at the current point." t nil)

(autoload (quote insert-header-tests) "c-support" "\
Put test coverage checkboxes into headers" nil nil)

;;;***


;;;### (autoloads (lookup-month current-date-string insert-current-date insert-current-date-and-time) "date" "date.el" (13135 4776))
;;; Generated autoloads from date.el

(autoload (quote insert-current-date-and-time) "date" "\
Inserts the date and time into the buffer at the current point." t nil)

(autoload (quote insert-current-date) "date" "\
Inserts the Current Date" t nil)

(autoload (quote current-date-string) "date" "\
Return the Current Date as a String" nil nil)

(autoload (quote lookup-month) "date" "\
Return string number corresponding to month given" nil nil)

;;;***


;;;### (autoloads (block-cm-center-line block-comment-line remove-ws-from-string block-comment-end-string block-comment-begin-string comment-fill-character uncomment-region block-comment-region recomment-block) "block-cm" "block-cm.el" (13067 18620))
;;; Generated autoloads from block-cm.el

(autoload (quote recomment-block) "block-cm" "\
Fills paragarph for the block-styled comment point is in.  Point must
be in a block comment, it cannot not be on the 1st or last line.
My definition of a comment block looks like this:
/*********************************************************/
/* You mean you actually comment code?			 */
/*							 */
/*							 */
/*********************************************************/
You can change the regexps for different looking comment lines.
" t nil)

(autoload (quote block-comment-region) "block-cm" "\
Wrap a rectangular block of comments around region.  'C' Example: 
/*******************************************************************/ 
/* This is a block comment region:                                 */
/* My Prog:  whatever                                              */
/*******************************************************************/

This can be removed with uncomment-region (\\[uncomment-region])." t nil)

(autoload (quote uncomment-region) "block-cm" "\
Strip out rectangular blocks in a region. The comment look like this (for 'C'):

/*******************************************************************/ 
/* This is a block comment region:                                 */
/* My Prog:  whatever                                              */
/*******************************************************************/

and can be make by marking a region and typing \\[block-comment-region]." t nil)

(autoload (quote comment-fill-character) "block-cm" "\
Get a character that would be good to use in comment lines." nil nil)

(autoload (quote block-comment-begin-string) "block-cm" "\
Returns a string that is suitable to begin a block in the current mode." nil nil)

(autoload (quote block-comment-end-string) "block-cm" "\
Returns a string suiable for ending block comments." nil nil)

(autoload (quote remove-ws-from-string) "block-cm" "\
Returns its argument with all white space removed." nil nil)

(autoload (quote block-comment-line) "block-cm" "\
Put the current line in a block comment." t nil)

(autoload (quote block-cm-center-line) "block-cm" "\
Center the current line within 0..fill-column, using spaces" nil nil)
 (autoload 'make-block-region "block-cm"   "Put a box around a region, delimited by key'd characters" 't nil)

;;;***


;;;### (autoloads (find-toc-entry begin-current-symbol end-current-symbol search-forward-current-symbol search-backward-current-symbol) "wsearch" "wsearch.el" (13077 2186))
;;; Generated autoloads from wsearch.el

(autoload (quote search-backward-current-symbol) "wsearch" "\
Searches for the preceding occurrence of the symbol under the current point." t nil)

(autoload (quote search-forward-current-symbol) "wsearch" "\
Searches for the preceding occurrence of the symbol under the current point." t nil)

(autoload (quote end-current-symbol) "wsearch" "\
Return the location of the end of the current word." nil nil)

(autoload (quote begin-current-symbol) "wsearch" "\
Return the location of the beginning of the current word." nil nil)

(autoload (quote find-toc-entry) "wsearch" "\
Find a function definition from a table of contents entry." t nil)

;;;***


;;;### (autoloads (insert-ID-String c-mode-insert-copyright h-file-wrapper buffer-get-c-define-name insert-header-wrapper) "c-stuff" "c-stuff.el" (13240 496))
;;; Generated autoloads from c-stuff.el

(defmodemethod insert-header-wrapper-internal default (buf-name) (insert "\n#ifndef " buf-name "\n#define " buf-name "\n\n" "#ifdef __cplusplus\nextern \"C\" {\n#endif\n") (goto-char (point-max)) (insert "\n\n\n#ifdef __cplusplus\n}\n#endif\n" "#endif " comment-start " " buf-name " " comment-end))

(defmodemethod insert-header-wrapper-internal c++-mode (buf-name) (if (looking-at "/\\*") (search-forward "*/" nil (quote t))) (while (looking-at "//") (forward-line 1)) (insert "\n#ifndef " buf-name "\n#define " buf-name "\n\n") (end-of-buffer) (insert "\n\n\n#endif " comment-start " " buf-name " " comment-end))

(autoload (quote insert-header-wrapper) "c-stuff" "\
Place and #ifndef type multiple include protection around file.
Example:
#ifndef THISFILE_H
#define THISFILE_H
/* stuff */
#endif  /* THIFILE_H */

This skips the first comment in the file to allow for a comment header." t nil)

(autoload (quote buffer-get-c-define-name) "c-stuff" "\
Return buffer name suitable for a c token, in upper case.
Example:  buffer: temp.h  return: TEMP_H" nil nil)

(autoload (quote h-file-wrapper) "c-stuff" "\
If this is a .h file, call insert-header-wrapper." nil nil)

(autoload (quote c-mode-insert-copyright) "c-stuff" "\
Inserts a copyright string in a static char * at the beginning file.
This function uses the same copyright message as inserted in the header
in the headers package." t nil)

(autoload (quote insert-ID-String) "c-stuff" "\
Insert an RCS ID string" t nil)

;;;***


;;;### (autoloads (get-association make-association add-to-mode-alist prepend-to-list-unique append-to-list-unique) "alists" "alists.el" (13135 4768))
;;; Generated autoloads from alists.el
 (autoload (quote prepend-to-list) "alists" "Macro to prepend a new value onto a list" nil (quote macro))
 (autoload (quote append-to-list) "alists" "Macro to append a new value onto a list" nil (quote macro))

(autoload (quote append-to-list-unique) "alists" "\
Append VALUES to LIST, then make sure list (which should be an
alist), has unique keys, by removing any leading pairs for non-unique
keys" nil (quote macro))

(autoload (quote prepend-to-list-unique) "alists" "\
Append VALUES to LIST, then make sure list (which should be an
alist), has unique keys, by removing any subsequent pairs for
non-unique keys" nil (quote macro))

(autoload (quote add-to-mode-alist) "alists" "\
Add something to an alist." nil nil)

(autoload (quote make-association) "alists" "\
Associates in LIST the KEY with VALUE.  It overwrites an old
association, if there is one." nil nil)

(autoload (quote get-association) "alists" nil nil nil)

;;;***



;;;### (autoloads (copyright-notice-off copyright-notice-on widen-update-toc widen-and-run-function set-header-required-mode set-header-mode make-headers touch-headers update-file-name update-last-modified-date update-last-modifier update-write-count update-file-header current-d-m-y-string make-box-comment make-divisor make-header fill-line-with-preceding-character user-full-name-and-email) "header" "header.el" (13135 4784))
;;; Generated autoloads from header.el

(autoload (quote user-full-name-and-email) "header" "\
Returns the full name and email address of the current user" nil nil)

(autoload (quote fill-line-with-preceding-character) "header" "\
Fills a line with a character preceding the point.If column is not provided, fill-column is used.
If character is not provided, last non white space character is used." t nil)

(autoload (quote make-header) "header" "\
Makes a standard file header at the top of the buffer. A header is
   composed of a mode line, a body, and an end line.  The body is
   constructed by calling the functions in make-header-hooks.
   The mode line and end lines start and terminate block comments while the
   body lines just have to continue the comment. " t nil)

(autoload (quote make-divisor) "header" "\
A divisor line is the comment start, filler, and the comment end" t nil)

(autoload (quote make-box-comment) "header" "\
Inserts a box comment that is built using mode specific comment characters." t nil)

(autoload (quote current-d-m-y-string) "header" nil nil nil)

(autoload (quote update-file-header) "header" "\
If the file has been modified, searches the first header-max chars in the
   buffer using the regexps in file-header-update-alist. When a match is
   found, it applies the corresponding function with the point located just
   after the match.  The functions can use (match-beginning) and
   (match-end) calls to find out the strings that causes them to be invoked." t nil)

(autoload (quote update-write-count) "header" nil nil nil)

(autoload (quote update-last-modifier) "header" nil nil nil)

(autoload (quote update-last-modified-date) "header" nil nil nil)

(autoload (quote update-file-name) "header" nil nil nil)

(autoload (quote touch-headers) "header" nil nil nil)

(autoload (quote make-headers) "header" nil nil nil)

(autoload (quote set-header-mode) "header" nil nil nil)

(autoload (quote set-header-required-mode) "header" nil nil nil)

(autoload (quote widen-and-run-function) "header" "\
Widen the buffer before executing a function." nil nil)

(autoload (quote widen-update-toc) "header" "\
Widen buffer and run update-table-of-contents" nil nil)

(autoload (quote copyright-notice-on) "header" "\
Set copyright notice to be included." t nil)

(autoload (quote copyright-notice-off) "header" "\
Set copyright notice to not be included." t nil)

;;;***


;;;### (autoloads nil "instalit" "instalit.el" (13423 18298))
;;; Generated autoloads from instalit.el
 (autoload 'instalit-mode "instalit"   "Major mode for editing instalit scripts.\n\n\\{instalit-mode-map}" 't)

;;;***

;;;### (autoloads (mark-compilation allow-buffer-changes) "mk-comp" "mk-comp.el" (13059 21079))
;;; Generated autoloads from mk-comp.el

(autoload (quote allow-buffer-changes) "mk-comp" "\
Allow body to change buffer regardless of buffer's read-only state" nil (quote macro))
 (autoload 'mkc-mode-map "mk-comp" "keymap for mkc-mode" nil 'keymap)
 (autoload 'mkc-mode "mk-comp"   "Mode which allows you to mark specific compilation entries for\ndeletion or special interest" 't)

(autoload (quote mark-compilation) "mk-comp" "\
Run a compilation on the current buffer" t nil)

;;;***


;;;### (autoloads (doc-whitespacep first-char-of last-char-of whitespacep leading-whitespace trailing-whitespace trim-trailing-whitespace trim-leading-whitespace trim-whitespace trim-all-whitespace) "whitesp" "whitesp.el" (13067 38950))
;;; Generated autoloads from whitesp.el

(autoload (quote trim-all-whitespace) "whitesp" "\
Process a string leaving only one space in place of any whitespace." nil nil)

(autoload (quote trim-whitespace) "whitesp" "\
Remove white space from both ends of a string" nil nil)

(autoload (quote trim-leading-whitespace) "whitesp" "\
Remove the leading whitespace" nil nil)

(autoload (quote trim-trailing-whitespace) "whitesp" "\
Remove the trailing whitespace" nil nil)

(autoload (quote trailing-whitespace) "whitesp" "\
Return the trailing whitespace" nil nil)

(autoload (quote leading-whitespace) "whitesp" "\
Return the leading whitespace" nil nil)

(autoload (quote whitespacep) "whitesp" "\
Predicate for whitespace." nil nil)

(autoload (quote last-char-of) "whitesp" "\
Return the last character of STRING" nil nil)

(autoload (quote first-char-of) "whitesp" "\
Return the first character of STRING" nil nil)

(autoload (quote doc-whitespacep) "whitesp" nil nil nil)

;;;***


;;;### (autoloads (edit-faces) "faceedit" "faceedit.el" (13258 59266))
;;; Generated autoloads from faceedit.el

(autoload (quote edit-faces) "faceedit" "\
Edit faces" t nil)

;;;***


;;;### (autoloads (next-function-mccabe-complexity insert-mccabe-complexity) "complex" "complex.el" (13059 21060))
;;; Generated autoloads from complex.el

(autoload (quote insert-mccabe-complexity) "complex" "\
Just that" t nil)

(autoload (quote next-function-mccabe-complexity) "complex" "\
Find the McCabe complexity of the following function" nil nil)

;;;***


;;;### (autoloads (document-class) "classdoc" "classdoc.el" (13259 38223))
;;; Generated autoloads from classdoc.el
(autoload 'mconcat "classdoc" nil nil 'macro)

(autoload (quote document-class) "classdoc" "\
Put in documentation template for C++ class" t nil)

;;;***


;;;### (autoloads (align-equals) "align-eq" "align-eq.el" (13059 21041))
;;; Generated autoloads from align-eq.el

(autoload (quote align-equals) "align-eq" "\
make the first assignment operator on each line line up vertically" t nil)

;;;***



;;;### (autoloads (msvt-define-indention msvt-define-end-indention) "msvt" "msvt.el" (13249 17864))
;;; Generated autoloads from msvt.el

(defvar msvt-basic-indent 3 "\
*Basic level of indention used in MS Visual Test mode")

(autoload (quote msvt-define-end-indention) "msvt" nil nil nil)

(autoload (quote msvt-define-indention) "msvt" "\
Define the indention for WORD as VAL" nil nil)
 (autoload (quote ms-visual-test-mode) "msvt"     "Major mode for editing Microsoft Visual Test scripts." 't)

;;;***



;;;### (autoloads nil "mifmode" "mifmode.el" (13059 21078))
;;; Generated autoloads from mifmode.el
 (autoload (quote mif-mode) "mifmode"     "Major mode for editing FrameMaker MIF files." 't)

;;;***


;;;### (autoloads (make-c++-accessors) "c++-tools" "c++-tools.el" (13059 21046))
;;; Generated autoloads from c++-tools.el

(autoload (quote make-c++-accessors) "c++-tools" "\
Make accessors for the current line's data type" t nil)

;;;***


;;;### (autoloads (comment-straighten-right-edge) "comm-align" "comm-align.el" (13059 21058))
;;; Generated autoloads from comm-align.el

(autoload (quote comment-straighten-right-edge) "comm-align" "\
Align the right-hand edges of a comment
of the form (example in C):
/* Here is the first line */
/* of a multiple          */
/* comment in your code.  */
The alignment is made on the longest line of a sequence of
consecutive comment lines, starting with the current line." t nil)

;;;***



;;;### (autoloads (align-regexp) "align-regexp" "align-regexp.el" (13258 37259))
;;; Generated autoloads from align-regexp.el

(autoload (quote align-regexp) "align-regexp" "\

This simple function is the most wonderful function of all time.

Well maybe not quite, but it is right up there.  It is similar to the
align-equals function, but prompts for a regexp.  It finds the first
occurrence of that regexp in each line, and lines them up as far left as
possible but no further left than the leftmost occurrence in any of the
lines.

\"Huh?\", you say?  An example will make everything clear.  Consider a
marked region containing this text:

  bool operator< (const char* abc) { return strcmp(LS_Str, abc) < 0; }
  bool operator> (const char* s) { return strcmp(LS_Str, s) > 0; }
  bool operator<= (char* s) { return strcmp(LS_Str, s) <=0; }
  bool operator>= (char* s) { return strcmp(LS_Str, s) >=0;   }

Performing align-regexp and entering \"{\" will yield:

  bool operator< (const char* abc) { return strcmp(LS_Str, abc) < 0; }
  bool operator> (const char* s)   { return strcmp(LS_Str, s) > 0; }
  bool operator<= (char* s)        { return strcmp(LS_Str, s) <=0; }
  bool operator>= (char* s)        { return strcmp(LS_Str, s) >=0;   }

Doing it again on the same region with \"}\" yields:

  bool operator< (const char* abc) { return strcmp(LS_Str, abc) < 0; }
  bool operator> (const char* s)   { return strcmp(LS_Str, s) > 0;   }
  bool operator<= (char* s)        { return strcmp(LS_Str, s) <=0;   }
  bool operator>= (char* s)        { return strcmp(LS_Str, s) >=0;   }

You could also use a longer string.  Given the original form, entering
\"return\" would give:

  bool operator< (const char* abc) { return strcmp(LS_Str, abc) < 0; }
  bool operator> (const char* s) {   return strcmp(LS_Str, s) > 0; }
  bool operator<= (char* s) {        return strcmp(LS_Str, s) <=0; }
  bool operator>= (char* s) {        return strcmp(LS_Str, s) >=0;   }

By lining up things from left to right, you can pretty much make any
alignment.  Furthermore, you can perform multiple alignments at once,
by specifying a comma separated list of expressions to align.  For
example, the string \"{,}\" would align the opening and closing braces
in the above text.

Beware of regexp chars with special meanings.  With a numeric prefix,
the function does not force a space in the text.

When called non-interactively, it has the following arguments:

    (align-regexp regexp begin end &optional no-space pad-char subexp-num)

    regexp       - string for the regular expression to align.  This
                   can contain multiple comma separated regexps.  To
                   use a comma in the expression, backslash escape it.

    begin        - start of region on which to operate

    end          - end of region on which to operate

    no-space     - numeric prefix from interactive call.  1 will always
                   force at least once space, >1 will not.

    pad-char     - character to use for adjusting text instead of
                   the default space.

    subexp-num   - the number of the subexpression within regexp which
                   is where the alignment should begin.  This is usually
                   0 for the entire regexp (and thus the alignment
                   happens at the beginning of it) but it could be
                   something else.  Passed to match-beginning.

" t nil)

;;;***


;;;### (autoloads (define-crippled-method cclass::execute-method define-cclass build-proper-defstruct defcclass) "cclass" "cclass.el" (13258 59258))
;;; Generated autoloads from cclass.el

(autoload (quote defcclass) "cclass" "\
*Define a c like class -- this is a defstruct, but we can hook the
:include" nil (quote macro))

(autoload (quote build-proper-defstruct) "cclass" "\
Make sure the defstruct includes standard-object" nil nil)

(autoload (quote define-cclass) "cclass" nil nil nil)
(autoload (quote defcmethod) "cclass"   "Define a (crippled) method.  Methods can specialize on the FIRST\nargument only" nil (quote macro))

(autoload (quote cclass::execute-method) "cclass" "\
Execute a method" nil nil)

(autoload (quote define-crippled-method) "cclass" "\
Figure out if this is a before, after or normal and handle
appropriately" nil nil)

;;;***

;;;### (autoloads (eltest::forget-all-tests defTest) "eltest" "eltest.el" (13258 59264))
;;; Generated autoloads from eltest.el

(defvar eltest::indent-inc 2 "\
*Amount of indention for each increment")

(defvar eltest::dont-find-differences nil "\
*If 't, diffs will not be done")

(autoload (quote defTest) "eltest" nil nil (quote macro))
(autoload 'eltest::create-test "eltest"   "Create the appropriate test" nil)

(autoload (quote eltest::forget-all-tests) "eltest" "\
Get rid of all test" t nil)

;;;***


;;;### (autoloads (idl-mode) "idl-mode" "idl-mode.el" (13085 52585))
;;; Generated autoloads from idl-mode.el

(autoload (quote idl-mode) "idl-mode" "\
Major mode for editing IDL code.
idl-mode Revision: 1.01

The hook variable `idl-mode-hook' is run with no args, if that
variable is bound and has a non-nil value.

Key bindings:
\\{IDL-mode-map}" t nil)

;;;***


;;;### (autoloads (ispell-strings ispell-comments) "spellsup" "spellsup.el" (13077 2185))
;;; Generated autoloads from spellsup.el

(autoload (quote ispell-comments) "spellsup" "\
Run Ispell region on all comments in the buffer" t nil)

(autoload (quote ispell-strings) "spellsup" "\
Run Ispell region on all strings in the current buffer." t nil)

;;;***


;;;### (autoloads (dired-do-this dired-do-command while-editing) "diredsup" "diredsup.el" (13510 33079))
;;; Generated autoloads from diredsup.el

(autoload (quote while-editing) "diredsup" "\
Execute body while visiting file" nil (quote macro))

(autoload (quote dired-do-command) "diredsup" "\
Apply COMMAND to all files marked in dired" t nil)

(autoload (quote dired-do-this) "diredsup" "\
Do the recorded \"thing\" on all files.
Use \\[exit-recursive-edit] to end edits on the first file." t nil)

;;;***


;;;### (autoloads (with-output-to-buffer in-temp-buffer-same-mode in-temp-buffer in-buffer) "ptmacros" "ptmacros.el" (13510 32728))
;;; Generated autoloads from ptmacros.el

(autoload (quote in-buffer) "ptmacros" "\
Execute execute in THEBUF forms BODY
THEBUF must be a buffer or the name of an existing buffer" nil (quote macro))

(autoload (quote in-temp-buffer) "ptmacros" nil nil (quote macro))

(autoload (quote in-temp-buffer-same-mode) "ptmacros" nil nil (quote macro))

(autoload (quote with-output-to-buffer) "ptmacros" "\
Evaluate body with buffer as standard output" nil (quote macro))

;;;***


;;;### (autoloads (fcreate-add-to-creation-alist) "fcreate" "fcreate.el" (13249 17859))
;;; Generated autoloads from fcreate.el

(autoload (quote fcreate-add-to-creation-alist) "fcreate" "\
Arrange so that if file is created that matches REGEXP, FUNCTION is
called in the newly created buffer" nil nil)

;;;***


(provide 'nvs-auto)


;; Local Variables:
;; generated-autoload-file: "nvs-auto.el"
;; End: